/************************************************************************
 * @description Windows Snipper and Annotation tool in Autohotkey 2.1
 * @file SnipShape.ahk2
 * @author Tom Wilkason
 * @date 2024/04/06
 * @version 1.0.0
 ***********************************************************************/
#Requires AutoHotkey v2.1-
;-----------------------------------------------
;
; AutoHotkey alternate to Windows Snipping Tool with additional features
; Creates Gui of Snip that can be manipulated onscreen
;
;	Credits:
;  Fanatic Guru / SKAN / iseahound plus
;	The work of dozens of people inspired this script.
;	Many of them listed in the threads below:
;
;	Screen Clipping		https://www.autohotkey.com/boards/viewtopic.php?f=6&t=12088
;	Gdip				      https://www.autohotkey.com/boards/viewtopic.php?t=72011
;  Snipper              https://www.autohotkey.com/boards/viewtopic.php?f=83&t=115622
;  UWP OCR Library      https://github.com/Descolada/OCR
;-----------------------------------------------
/* Usage *
   See Readme File
*/
OutputDebug("SnipShape Loading")

#Warn All, OutputDebug
#SingleInstance force       ; Ensures that only the last executed instance of script is running
KeyHistory(0)               ; No key history
ListLines(0)                ; disable logging of keys
ProcessSetPriority("H")     ; Above normal priority
SetMouseDelay(-1)           ; don't sleep on mouse movements
SetKeyDelay(-1, -1)         ; don't sleep on key strokes, added second on 3/9/2020
SetDefaultMouseSpeed(0)     ; move mouse instantly
SetWinDelay(0)              ; Sets the delay that will occur after each windowing function, minimal but not -1
SetControlDelay(-1)         ; Sets the delay that will occur after each control-modifying function.
SendMode("Input")           ; uses the SendInput method for Send, SendText, Click, and MouseMove/Click/Drag
SetTitleMatchMode(1)        ; match start in text
DetectHiddenWindows(0)      ; needed to check if pop-up gui is hidden or not
DetectHiddenText(0)         ; Not sure why this is set
Global WinVer := StrSplit(A_OSVersion, ".")[3] < 22000 ? 10 : 11
DllCall("shell32\SetCurrentProcessExplicitAppUserModelID", "wstr", "AutoHotkey.SnipShape")
SetDPIContext(-4)
Suspend(1)
GDIp.SystemStartup()

;-----------------------------------------------
; DEFAULT SETTING - VARIABLES
;-----------------------------------------------
Global SETTINGS := Object()
SETTINGS.Path               := A_AppData . "\SnipShape"
SETTINGS.File               := SETTINGS.Path . "\SnipShape.ini"
SETTINGS.CursorPath         := IniReadValue("User Snips", "CursorPath", GetFullPathName('.\Cursors\'))
; Use same folder as Windows Snipper
SETTINGS.SavePath_Image     := IniReadValue("User Snips", "SnipPath", GetFullPathName(A_MyDocuments . "\..\Pictures\Screenshots\"))
SETTINGS.SavePath_Image_Ext := 'PNG' ; BMP|DIB|RLE|JPG|JPEG|JPE|JFIF|GIF|TIF|TIFF|PNG
SETTINGS.SavePath_Icons     := IniReadValue("User Snips", "IconPath",GetFullPathName('.\Stickies\'))
SETTINGS.Scale_Freehand     := IniReadValue("User Shapes", "ScaleFreehand", 0)

If !FileExist(SETTINGS.Path)
   DirCreate(SETTINGS.Path)
If !FileExist(SETTINGS.SavePath_Image)
   DirCreate(SETTINGS.SavePath_Image)
If !FileExist(SETTINGS.SavePath_Icons)
   DirCreate(SETTINGS.SavePath_Icons)

;-----------------------------------------------
; INITIALIZATION - VARIABLES
;-----------------------------------------------
SETTINGS.SnipShapeIcon := SETTINGS.CursorPath "\SnipShape.ico"
A_IconTip := "Ctrl-Win: Clip Screen Area to Window`nWin-Alt: Clip Screen Area Only "
TraySetIcon(SETTINGS.SnipShapeIcon) ; Scissors
; =====================================================================
;                          I N C L U D E S
; =====================================================================
; SnipShape related files
#Include %A_ScriptDir%\Lib          ; Set Lib folder
#include libMisc.ahk2
#include clsGDIp.ahk2
#include clsBitmap.ahk2
#include clsButtonBar.ahk2
#include clsClipboard.ahk2
#include clsCursor.ahk2
#include clsMenus.ahk2
#include clsShapes.ahk2
#include clsSnips.ahk2
; https://github.com/Descolada/OCR/blob/main/Lib/OCR.ahk
#include OCR.ahk2

OnExit(Exiting)

;======================================================================
;                              HOTKEYS
; Win-PrintScreen default captures window
; PrintScreen or Win-Shift-S default snipper
;======================================================================
;----------------------------------------------------------------------
; Create Snip from Active window and optionally put in clipboard
;----------------------------------------------------------------------
+PrintScreen:: {
   if( hWnd := WinExist("A") ) {
      ; BUG PrintWindow not working for some legacy apps, need to account for the invisble shadow borders
      hBitmap := BitMap.HBitmapFromHWNDPW(hWnd, 0)
      Clipboard.SetHBITMAPToClipboard(hBitmap)

      qTrayTip("Captured Active Window to clipboard",4,,5000)
   } else {
      qTrayTip("Did not find an active window")
   }
}
!PrintScreen:: {
   if( hWnd := WinExist("A") ) {
      Area := Snips.getWindowArea(hWnd)
      If (false) {
         ; This method will handle partially ofscreen windows
         hBitmap := BitMap.HBitmapFromHWND(hWnd, 0)
         ; TODO - Make sure this method works well
         Snips.CreateSnipFromHBitmap(hBitmap, Area)
         ; TODO - handle clipbard, autosave to file
      } Else {
         Snips.SnipArea(Area, Snips.UpdateClipboard, Snips.autoSaveToFile, true)
      }
      qTrayTip("Captured Active Window")
   } else {
      qTrayTip("Did not find an active window")
   }
}
;----------------------------------------------------------------------
; Capture the entire monitor, can crop later
; Do not put on the clipboard if if that is enabled
;----------------------------------------------------------------------
^PrintScreen:: {
   Area := Snips.activeMonArea()
   Snips.SnipArea(Area, false, Snips.autoSaveToFile, true)
   qTrayTip("Captured Active Monitor")
}
;----------------------------------------------------------------------
; Edit Clipboard if in proper format
;----------------------------------------------------------------------
+#e:: {
   If ( NOT Snips.Clipboard2Snip()) {
      qTrayTip("No image on the clipboard to edit",2)
   }
}

;----------------------------------------------------------------------
; Used for editing existing images in apps like OneNote
; Restores the clipboard
;----------------------------------------------------------------------
+#c:: {
   CB_Orig := ClipboardAll()
   A_Clipboard := ""
   SendInput("^c")	; Copy to clipboard
   Sleep(100)
   If ClipWait(0.2, 1) {
      If ( NOT Snips.Clipboard2Snip()) {
         qTrayTip("No image on the clipboard to edit:" A_Clipboard,2)
      }
   } Else {
      qTrayTip("Nothing on the clipboard to edit",2)
   }
   if Not Snips.UpdateClipboard
      A_Clipboard := CB_Orig
}
;----------------------------------------------------------------------
; Apps Key to start a snip
;----------------------------------------------------------------------
AppsKey:: {
   If ( NOT isRepeat(300)) {
      Area := Snips.SelectScreenRegion(1, 'LButton', "Orange", Snips.UpdateClipboard, 1, Snips.captureStatic, Snips.dimScreen)
   }
}
;----------------------------------------------------------------------
; Hide/Show all Snips
;----------------------------------------------------------------------
!F12:: {
   if Snips.AllMinimized()
      Snips.RestoreAll()
   else
      Snips.MinimizeAll()
}

;----------------------------------------------------------------------
; Handle the Mouse based Screen Clipping below, either one or two step
;----------------------------------------------------------------------
; block automatic key repeats for re-triggering action
isRepeat(to) => (A_ThisHotkey = A_PriorHotkey) AND (A_TimeSincePriorHotkey < to)
;----------------------------------------------------------------------
; Create a Snip (keys in either order)
;----------------------------------------------------------------------
; <#Ctrl::
; ^Lwin:: {
; <#Shift::
; +Lwin:: {
<#S:: {
   If ( NOT isRepeat(300)) {
      Snips.SelectScreenRegion(1, 'LButton', "Orange", Snips.UpdateClipboard, 1, Snips.captureStatic, Snips.dimScreen)
      ; qTrayTip("Clipped Screen to Clipboard")
   }
}
;----------------------------------------------------------------------
; Clipboard Only (keys in either order)
;----------------------------------------------------------------------
<#Z:: {
   if (NOT isRepeat(300)) {
      Snips.SelectScreenRegion(1, 'LButton', "Red", True, 0, Snips.captureStatic, Snips.dimScreen)
   }
}
;----------------------------------------------------------------------
; Snip Selected Image and Optionally Copy to Clipboard
;----------------------------------------------------------------------
<^#Lbutton:: {
   Snips.SelectScreenRegion(3, 'LButton', "Orange", Snips.UpdateClipboard, 1)
}
;----------------------------------------------------------------------
;	Select region and copy to Clipboard Only
;----------------------------------------------------------------------
!#Lbutton:: {
   Snips.SelectScreenRegion(3, 'LButton', "Red", True, 0)
}
;----------------------------------------------------------------------
; OCR code currently works on window handle only
; #O normally locks device orientation on windows
;----------------------------------------------------------------------
<#O:: {
   Snips.SelectScreenRegion(1, 'LButton', "0x0077ff", False, 13)
}


;======================================================================
; Menu and Escape Handlers for Snip windows
;======================================================================
; NOTE - these will trigger if the color picker is up but snip is active.
HotIfWinActive('SnipShapeWindow ahk_class AutoHotkeyGUI')
   ; Shape Letter/Name HotKeys
   shapeColorHotKeys()
   shapeColorHotKeys() {
      for _idx, _sn in Shapes.ShapeName {
         _key := Trim(StrSplit(_sn,"-")[2])
         Hotkey(_key, Snips.SetDrawModeKey.Bind(Snips, _idx))
      }
      ; Color HotKeys, can be overridden by the INI file
      for _idx, _defColor in Shapes.DefaultColorNames {
         _cName := IniReadValue("User Shape Color", "Color " _idx, 123)
         if _cName = 123 
            IniWrite(_defColor, SETTINGS.File, "User Shape Color", "Color " _idx)
         else
            _defColor := _cName
         if _idx < 10
            Hotkey(_idx, Shapes.setShapeColor.Bind(Shapes, _defColor)) ; bind calls in the context of Shapes class
      }
   }
HotIfWinActive   
; Spare bar has multiple uses, constrain it for active mode to cancel action
#HotIf WinActive('SnipShapeWindow ahk_class AutoHotkeyGUI') AND NOT Shapes.DrawActive
   Space:: Snips.SetDrawMode(0)

#HotIf WinActive('SnipShapeWindow ahk_class AutoHotkeyGUI')
   ; ~Esc:: Snips.Close()	;	<-- @@ Close Active Snip, let Esc pass through for key checks (use onEvent instead?)
    Del:: focusBorder.RemoveShapeIfFocused()	;	<-- @@ Close Active Shape
   ; Hide/clean all shapes
   +Del:: {
      Snips.ClearAllShapes()
      Snips.flashBorder(WinExist("A"))
   }
   ^P:: Shapes.AddPictureFromFile(WinExist("A"), "lButton", "P")
   ^c:: {
      ; Copy active snip and shapes to the clipboard
      ; NOTE - We will copy focus border if it is active
      if (sw := WinExist("A")) {
         Snips.Snip2Clipboard(Snips.borderWithCopy, sw)
         Snips.Minimize(sw)
      }
   }
   ^x:: {
      ; Cut active snip and shapes to the clipboard
      if (sw := WinExist("A")) {
         Snips.Snip2Clipboard(Snips.borderWithCopy, sw)
         Snips.Close(sw, 0)
      }
   }
   ^s:: {
      Snips.Snip2File(SETTINGS.SavePath_Image, Snips.borderWithSave)
      Snips.flashBorder(WinExist("A"))
   }
   ^D:: {
      If (focusBorder.IsShown) {
         ; Clone the shape if possible
         Shapes.Duplicate("lbutton", focusBorder.ShapeObj)
      } Else {
         ; Clone the snip (without the shapes)
         Snips.CloneAndScaleSnip(WinExist("A"), 1.0)
      }
   }
   ; Paste new shape (text or a bitmap)
   ^V:: {
      Shapes.PasteNewShape()
   }
   ; ~Down:: {
   ;    ; Only if not actively drawing
   ;    If NOT GetKeyState("lbutton", "P")
   ;       Snips.Minimize(WinExist("A"))
   ; }
   ^Down:: {
      Snips.MinimizeAll()
   }
   ;----------------------------------------------------------------------
   ; Reduce and Enlarge to a new snip
   ; Also on RMB Menu on Snip
   ;----------------------------------------------------------------------
   ^O:: Snips.OCRSnipToClipboard(WinExist("A"), 15)
   ^T:: Snips.OCRSnipToClipboard(WinExist("A"), 14)

   ^!=::
   ^!NumpadAdd:: Snips.CloneAndScaleSnip(WinExist("A"), 4.0)

   ^=::
   ^NumpadAdd:: Snips.CloneAndScaleSnip(WinExist("A"), 3.0)

   !=::
   !NumpadAdd:: Snips.CloneAndScaleSnip(WinExist("A"), 1.5)

   =::
   NumpadAdd:: Snips.CloneAndScaleSnip(WinExist("A"), 2.0)

   -::
   NumpadSub:: Snips.CloneAndScaleSnip(WinExist("A"), 1/2.0, 1)


   F1:: {
      ; Toggle Buttonbar
      if (ButtonBar.Enabled)
         ButtonBar.Hide(0)
      else
         ButtonBar.Show(0,1)
   }
   ; Read nummber color in real time
   getKeyColor(num, default) => IniReadValue("User Shape Color", "Color " . num, default)
#HotIf
;----------------------------------------------------------------------
; Move the active shape under these conditions
;----------------------------------------------------------------------
#HotIf WinActive('SnipShapeWindow ahk_class AutoHotkeyGUI') AND ( NOT GetKeyState("lbutton", "P") AND focusBorder.IsShown AND focusBorder.ShapeObj)
   $Up::ShiftShape(0, -5)
   $Down::ShiftShape(0, +5)
   $Left::ShiftShape(-5, 0)
   $Right::ShiftShape(+5, 0)
   ShiftShape(sX, sY) {
      Critical("On")
      C := focusBorder.ShapeObj.sCoord
      focusBorder.ShapeObj.GetPos(&X, &Y, &W, &H)
      ; Grid to the Shape sX/sY values
      dx := sX = 0 ? 0 : sX - Mod(C.X + sX, sX)
      dy := sY = 0 ? 0 : sY - Mod(C.Y + sY, sY)
      MouseMove(dx, dy, 0, "R")
      focusBorder.ShapeObj.Move(X + dx, Y + dy)
      focusBorder.Sync()
      Critical("Off")
   }
#HotIf

; Hotif


;----------------------------------------------------------------------
; INI Helper Function
; IniWriteIfBlank - Setting is not changed herein
; IniWriteValue - Setting is changed herein
;----------------------------------------------------------------------
IniWriteIfBlank(V, Section, Parameter) {
   If IniRead(SETTINGS.File, Section, Parameter, "XX") = "XX"
      IniWrite(V, SETTINGS.File, Section, Parameter)
}
IniWriteValue(V, Section, Parameter) {
   IniWrite(V, SETTINGS.File, Section, Parameter)
}
IniReadValue(Section,Item, Default) => IniRead(SETTINGS.File, Section, Item, Default)
Suspend(0)

/**
 * Exit Handler
 */
Exiting(ExitReason, ExitCode) {
   Global SETTINGS

   ; Shut down messages
   OnMessage(0x201, Snips.WM_LBUTTONDOWN, 0)
   OnMessage(0x006, Snips.WM_ACTIVATE, 0)
   OnMessage(0x0231, Snips.WM_SIZEEMOVE,0) ;WM_ENTERSIZEMOVE 
   OnMessage(0x0232, Snips.WM_SIZEEMOVE,0) ;WM_EXITSIZEMOVE  
   OnMessage(0x0216, Snips.WM_SIZEEMOVE,0) ; WM_MOVING

   Try Snips.CloseAll()
   ;----------------------------------------------------------------------
   ; Save Settings, IniWriteIfBlank means it only comes from settings file
   ;----------------------------------------------------------------------
   ; Snips
   IniWriteIfBlank(Snips.rawBorderWidth, "User Snips", "Border Width")
   IniWriteIfBlank(Snips.vertSync, "User Snips", "Vertical Sync on Select")
   IniWriteIfBlank(SETTINGS.SavePath_Icons, "User Snips", "IconPath")
   IniWriteIfBlank(SETTINGS.SavePath_Image, "User Snips", "SnipPath")
   IniWriteIfBlank(SETTINGS.CursorPath, "User Snips", "CursorPath")
   IniWriteIfBlank(SETTINGS.Scale_Freehand, "User Shapes", "ScaleFreehand")
   
   IniWriteValue(Snips.UpdateClipboard,  "Snips", "Auto Update Clipboard")
   IniWriteValue(Snips.BorderWithCopy,  "Snips", "Border With Copy")
   IniWriteValue(Snips.BorderWithSave,  "Snips", "Border With Save")
   IniWriteValue(Snips.autoSaveToFile,  "Snips", "Auto Save Clips to File")
   IniWriteValue(Snips.minimizeOnSnip,  "Snips", "Minimize On Snip to File")
   IniWriteValue(Snips.confirmClose,  "Snips", "Confirm Snip Close if it has Shapes") 
   IniWriteValue(Snips.dimScreen,  "Snips", "Dim Screen When Selecting") 
   IniWriteValue(Snips.snipGuides,  "Snips", "Snip Guides When Selecting") 
   IniWriteValue(Snips.captureStatic,  "Snips", "Capture Static Screen")
   IniWriteValue(Snips.topMost,  "Snips", "Keep Snip Always On Top")


   ;Button Bar   
   IniWriteIfBlank(ButtonBar.FontSize,  "User Button Bar", "Font Size")
   IniWriteValue(ButtonBar.Enabled,  "Button Bar", "Enabled")

   ; Common Shapes
   IniWriteIfBlank(hex(Shapes.outlineColor), "User Shape Color", "Outline Color")
   IniWriteValue(Shapes.outlineOpacity, "Common Shape", "Outline Opacity")
   IniWriteValue(Shapes.rawLineThickness, "Common Shape", "Line Thickness")
   IniWriteValue(Shapes.outlineThickFactor, "Common Shape", "Outline Thickness Factor")
   IniWriteValue(hex(Shapes.globalShapeColor), "Common Shape", "Default Shape Color")
   IniWriteValue(Shapes.shapeOpacity, "Common Shape", "Shape Opacity")
   ; Arrows
   IniWriteValue(Shapes.arrowLineThickness, "Arrow Shape", "Arrow Thickness")
   IniWriteValue(Shapes.ArrowSmoothFactor, "Arrow Shape", "Arrow Smoothing Factor")
   IniWriteValue(Shapes.arrowOpacity, "Arrow Shape", "Arrow Opacity")
   ; Body
   IniWriteValue(Shapes.fillOpacity, "Body Shape", "Shape Fill Opacity")
   ; Freehand
   IniWriteValue(Shapes.penLineThickness, "Freehand Shape", "Pen Thickness")
   IniWriteValue(Shapes.widePenThickness, "Freehand Shape", "Wide Pen Thickness")
   IniWriteValue(Shapes.penOpacity, "Freehand Shape", "Pen Opacity")
   IniWriteValue(Shapes.PenSmoothFactor, "Freehand Shape", "Pen Smoothing Factor")
   ; Highlighters / Redact
   IniWriteValue(Shapes.highLightThickness, "Highlight Shape", "Highlight/Whiteout Factor")
   IniWriteValue(Shapes.HighlightSmoothFactor, "Highlight Shape", "Highlight/Whiteout Smoothing Factor")
   IniWriteValue(Shapes.highlightOpacity, "Highlight Shape", "Highlighter Opacity")
   IniWriteValue(hex(Shapes.highlightColor), "Highlight Shape", "Highlighter Color")
   ; Obscure
   IniWriteValue(Shapes.PixelateBlockSize, "Obscure Shape", "Pixelate Block Size")
   IniWriteValue(Shapes.BlurDivisor, "Obscure Shape", "Blur Factor")
   ; Text
   IniWriteValue(TextShape.textOpacity, "Text", "Text Opacity")
   IniWriteValue(TextShape.TagFontName, "Text", "Tag Font Name")
   IniWriteValue(TextShape.TagFontStyle, "Text", "Tag Font Style")
   IniWriteValue(TextShape.TagFontSize, "Text", "Tag Font Size")
   IniWriteValue(TextShape.TCOpacity, "Text", "Tag Center Opacity")

   IniWriteValue(TextShape.FillFontName, "Text", "Fill Font Name")
   IniWriteValue(TextShape.FillFontStyle, "Text", "Fill Font Style")
   IniWriteValue(TextShape.FillAlignment, "Text", "Fill Text Alignment")
   IniWriteValue(TextShape.FillFontSize, "Text", "Fill Font Size")
   IniWriteValue(TextShape.FTOpacity, "Text", "Fill Text Opacity")
   IniWriteValue(TextShape.FTOLOpacity, "Text", "Outline Opacity")
   IniWriteValue(TextShape.FillOutline, "Text", "Rectangle Around Text")

   IniWriteValue(TextShape.OLFontName, "Text", "Outline Font Name")
   IniWriteValue(TextShape.OLFontStyle, "Text", "Outline Font Style")
   IniWriteValue(TextShape.OLBlur, "Text", "Outline Blur Value")
   IniWriteValue(TextShape.OLAlignment, "Text", "Outline Font Alignment")
   IniWriteValue(TextShape.OLFontSize, "Text", "Outline Font Size")
   IniWriteValue(TextShape.OLFillThickness, "Text", "Outline Width Percent")
   IniWriteValue(TextShape.OLOpacity, "Text", "Outline Edge Opactiy")

   GDIp.SystemShutdown()

   dLog("Exiting Snipper:" ExitReason)
}
dLog("SnipShape Ready")
